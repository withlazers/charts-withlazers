apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: keycloakidentityproviders.rustcloak.k8s.eboland.de
spec:
  group: rustcloak.k8s.eboland.de
  names:
    categories:
    - keycloak
    - all
    kind: KeycloakIdentityProvider
    plural: keycloakidentityproviders
    shortNames:
    - kcip
    singular: keycloakidentityprovider
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: true if the realm is ready
      jsonPath: .status.ready
      name: Ready
      type: boolean
    - description: Status String of the resource
      jsonPath: .status.status
      name: Status
      type: string
    - description: time since the realm was created
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: resource to define a identity provider in a [KeyclaokRealm](./keycloakrealm.md)
        properties:
          spec:
            anyOf:
            - required:
              - realmRef
            - required:
              - clusterRealmRef
            description: the KeycloakIdentityProvider resource
            properties:
              clusterRealmRef:
                description: The name of the cluster realm to which this object belongs to
                type: string
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: self == oldSelf
              definition:
                description: |-
                  IdentityProviderRepresentation

                  <details><summary>JSON schema</summary>

                  ```json { "type": "object", "properties": { "addReadTokenRoleOnCreate": { "title": "Stored tokens readable", "description": "Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.", "type": "boolean" }, "alias": { "title": "Alias", "description": "The alias uniquely identifies an identity provider and it is also used to build the redirect uri.", "type": "string" }, "authenticateByDefault": { "type": "boolean" }, "config": { "type": "object", "properties": { "allowCreate": { "title": "Allow create", "description": "Allow the external identity provider to create a new identifier to represent the principal.", "type": "string", "enum": [ "true", "false", "" ] }, "allowedClockSkew": { "title": "Allowed clock skew", "description": "Clock skew in seconds that is tolerated when validating identity provider tokens. Default value is zero.", "type": "string", "pattern": "^[0-9]*$" }, "attributeConsumingServiceIndex": { "title": "Attribute Consuming Service Index", "description": "Index of the Attribute Consuming Service profile to request during authentication.", "type": "string", "pattern": "^[0-9]*$" }, "authnContextClassRefs": { "title": "AuthnContext ClassRefs", "description": "Ordered list of requested AuthnContext ClassRefs.", "type": "string" }, "authnContextComparisonType": { "title": "Comparison", "description": "Specifies the comparison method used to evaluate the requested context classes or statements. The default is \"Exact\".", "type": "string", "enum": [ "exact", "minimum", "maximum", "better" ] }, "authnContextDeclRefs": { "title": "AuthnContext DeclRefs", "description": "Ordered list of requested AuthnContext DeclRefs.", "type": "string" }, "backchannelSupported": { "title": "Backchannel logout", "description": "Does the external IDP support backchannel logout?", "type": "string", "enum": [ "true", "false", "" ] }, "encryptionAlgorithm": { "title": "Encryption Algorithm", "description": "Encryption algorithm, which is used by SAML IDP for encryption of SAML documents, assertions or IDs. The corresponding decryption key for decrypt SAML document parts will be chosen based on this configured algorithm and should be available in realm keys for the encryption (ENC) usage. If algorithm is not configured, then any supported algorithm is allowed and decryption key will be chosen based on the algorithm configured in SAML document itself.", "type": "string" }, "entityId": { "title": "Service provider entity ID", "description": "The Entity ID that will be used to uniquely identify this SAML Service Provider.", "type": "string" }, "forceAuthn": { "title": "Force authentication", "description": "Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.", "type": "string", "enum": [ "true", "false", "" ] }, "hideOnLoginPage": { "title": "Hide on login page", "description": "If hidden, login with this provider is possible only if requested explicitly, for example using the 'kc_idp_hint' parameter.", "type": "string", "enum": [ "true", "false", "" ] }, "idpEntityId": { "title": "Identity provider entity ID", "description": "The Entity ID used to validate the Issuer for received SAML assertions. If empty, no Issuer validation is performed.", "type": "string" }, "loginHint": { "title": "Pass subject", "description": "During login phase, forward an optional login_hint query parameter to SAML AuthnRequest's Subject.", "type": "string", "enum": [ "true", "false", "" ] }, "nameIDPolicyFormat": { "title": "NameID policy format", "description": "Specifies the URI reference corresponding to a name identifier format.", "type": "string" }, "postBindingAuthnRequest": { "title": "HTTP-POST binding for AuthnRequest", "description": "Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.", "type": "string", "enum": [ "true", "false", "" ] }, "postBindingLogout": { "title": "HTTP-POST binding logout", "description": "Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.", "type": "string", "enum": [ "true", "false", "" ] }, "postBindingResponse": { "title": "HTTP-POST binding response", "description": "Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.", "type": "string", "enum": [ "true", "false", "" ] }, "principalAttribute": { "title": "Principal attribute", "description": "Name or Friendly Name of the attribute used to identify external users.", "type": "string" }, "principalType": { "title": "Principal type", "description": "Way to identify and track external users from the assertion. Default is using Subject NameID, alternatively you can set up identifying attribute.", "type": "string", "enum": [ "SUBJECT", "ATTRIBUTE", "FRIENDLY_ATTRIBUTE" ] }, "signSpMetadata": { "title": "Sign service provider metadata", "description": "Enable/disable signature of the provider SAML metadata.", "type": "string", "enum": [ "true", "false", "" ] }, "signatureAlgorithm": { "title": "Signature algorithm", "description": "The signature algorithm to use to sign documents. Note that 'SHA1' based algorithms are deprecated and can be removed in the future. It is recommended to stick to some more secure algorithm instead of '*_SHA1'.", "type": "string" }, "signingCertificate": { "title": "Validating X509 certificates", "description": "The public certificates Keycloak uses to validate the signatures of SAML requests and responses from the external IDP when Use metadata descriptor URL is OFF. Multiple certificates can be entered separated by comma (,). The certificates can be re-imported from the Metadata descriptor URL clicking the Import Keys action in the identity provider page. The action downloads the current certificates in the metadata endpoint and assigns them to the config in this same option. You need to click Save to definitely store the re-imported certificates.", "type": "string" }, "singleSignOnServiceUrl": { "title": "Single Sign-On service URL", "description": "The Url that must be used to send authentication requests (SAML AuthnRequest).", "type": "string" }, "syncMode": { "title": "Sync mode", "description": "Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers. Possible values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once during first login of the user with this identity provider, 'force' to always update the user during every login with this identity provider.", "type": "string", "enum": [ "IMPORT", "LEGACY", "FORCE" ] }, "validateSignature": { "title": "Validate Signatures", "description": "Enable/disable signature validation of external IDP signatures.", "type": "string", "enum": [ "true", "false", "" ] }, "wantAssertionsEncrypted": { "title": "Want Assertions encrypted", "description": "Indicates whether this service provider expects an encrypted Assertion.", "type": "string", "enum": [ "true", "false", "" ] }, "wantAssertionsSigned": { "title": "Want Assertions signed", "description": "Indicates whether this service provider expects a signed Assertion.", "type": "string", "enum": [ "true", "false", "" ] }, "wantAuthnRequestsSigned": { "title": "Want AuthnRequests signed", "description": "Indicates whether the identity provider expects a signed AuthnRequest.", "type": "string", "enum": [ "true", "false", "" ] }, "xmlSigKeyInfoKeyNameTransformer": { "title": "SAML signature key name", "description": "Signed SAML documents contain identification of signing key in KeyName element. For Keycloak / RH-SSO counter-party, use KEY_ID, for MS AD FS use CERT_SUBJECT, for others check and use NONE if no other option works.", "type": "string", "enum": [ "NONE", "KEY_ID", "CERT_SUBJECT" ] } }, "additionalProperties": { "type": "string" } }, "displayName": { "title": "Display name", "description": "Friendly name for Identity Providers.", "type": "string" }, "enabled": { "title": "Enabled", "type": "boolean" }, "firstBrokerLoginFlowAlias": { "title": "First login flow override", "description": "Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that no Keycloak account is currently linked to the authenticated identity provider account.", "type": "string" }, "hideOnLogin": { "title": "Hide on login page", "description": "If hidden, login with this provider is possible only if requested explicitly, for example using the 'kc_idp_hint' parameter.", "type": "boolean" }, "internalId": { "type": "string" }, "linkOnly": { "title": "Account linking only", "description": "If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider.", "type": "boolean" }, "organizationId": { "type": "string" }, "postBrokerLoginFlowAlias": { "title": "Post login flow", "description": "Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this to \"None\" if you need no any additional authenticators to be triggered after login with this identity provider. Also note that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.", "type": "string" }, "providerId": { "type": "string" }, "storeToken": { "title": "Store tokens", "description": "Enable/disable if tokens must be stored after authenticating users.", "type": "boolean" }, "trustEmail": { "title": "Trust Email", "description": "If enabled, email provided by this provider is not verified even if verification is enabled for the realm.", "type": "boolean" }, "updateProfileFirstLogin": { "type": "boolean" }, "updateProfileFirstLoginMode": { "type": "string" } }, "additionalProperties": false } ``` </details>
                properties:
                  addReadTokenRoleOnCreate:
                    description: Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
                    nullable: true
                    type: boolean
                  alias:
                    description: The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
                    nullable: true
                    type: string
                    x-kubernetes-validations:
                    - message: Value is immutable
                      rule: self == oldSelf
                  authenticateByDefault:
                    nullable: true
                    type: boolean
                  config:
                    description: |-
                      IdentityProviderRepresentationConfig

                      <details><summary>JSON schema</summary>

                      ```json { "type": "object", "properties": { "allowCreate": { "title": "Allow create", "description": "Allow the external identity provider to create a new identifier to represent the principal.", "type": "string", "enum": [ "true", "false", "" ] }, "allowedClockSkew": { "title": "Allowed clock skew", "description": "Clock skew in seconds that is tolerated when validating identity provider tokens. Default value is zero.", "type": "string", "pattern": "^[0-9]*$" }, "attributeConsumingServiceIndex": { "title": "Attribute Consuming Service Index", "description": "Index of the Attribute Consuming Service profile to request during authentication.", "type": "string", "pattern": "^[0-9]*$" }, "authnContextClassRefs": { "title": "AuthnContext ClassRefs", "description": "Ordered list of requested AuthnContext ClassRefs.", "type": "string" }, "authnContextComparisonType": { "title": "Comparison", "description": "Specifies the comparison method used to evaluate the requested context classes or statements. The default is \"Exact\".", "type": "string", "enum": [ "exact", "minimum", "maximum", "better" ] }, "authnContextDeclRefs": { "title": "AuthnContext DeclRefs", "description": "Ordered list of requested AuthnContext DeclRefs.", "type": "string" }, "backchannelSupported": { "title": "Backchannel logout", "description": "Does the external IDP support backchannel logout?", "type": "string", "enum": [ "true", "false", "" ] }, "encryptionAlgorithm": { "title": "Encryption Algorithm", "description": "Encryption algorithm, which is used by SAML IDP for encryption of SAML documents, assertions or IDs. The corresponding decryption key for decrypt SAML document parts will be chosen based on this configured algorithm and should be available in realm keys for the encryption (ENC) usage. If algorithm is not configured, then any supported algorithm is allowed and decryption key will be chosen based on the algorithm configured in SAML document itself.", "type": "string" }, "entityId": { "title": "Service provider entity ID", "description": "The Entity ID that will be used to uniquely identify this SAML Service Provider.", "type": "string" }, "forceAuthn": { "title": "Force authentication", "description": "Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.", "type": "string", "enum": [ "true", "false", "" ] }, "hideOnLoginPage": { "title": "Hide on login page", "description": "If hidden, login with this provider is possible only if requested explicitly, for example using the 'kc_idp_hint' parameter.", "type": "string", "enum": [ "true", "false", "" ] }, "idpEntityId": { "title": "Identity provider entity ID", "description": "The Entity ID used to validate the Issuer for received SAML assertions. If empty, no Issuer validation is performed.", "type": "string" }, "loginHint": { "title": "Pass subject", "description": "During login phase, forward an optional login_hint query parameter to SAML AuthnRequest's Subject.", "type": "string", "enum": [ "true", "false", "" ] }, "nameIDPolicyFormat": { "title": "NameID policy format", "description": "Specifies the URI reference corresponding to a name identifier format.", "type": "string" }, "postBindingAuthnRequest": { "title": "HTTP-POST binding for AuthnRequest", "description": "Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.", "type": "string", "enum": [ "true", "false", "" ] }, "postBindingLogout": { "title": "HTTP-POST binding logout", "description": "Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.", "type": "string", "enum": [ "true", "false", "" ] }, "postBindingResponse": { "title": "HTTP-POST binding response", "description": "Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.", "type": "string", "enum": [ "true", "false", "" ] }, "principalAttribute": { "title": "Principal attribute", "description": "Name or Friendly Name of the attribute used to identify external users.", "type": "string" }, "principalType": { "title": "Principal type", "description": "Way to identify and track external users from the assertion. Default is using Subject NameID, alternatively you can set up identifying attribute.", "type": "string", "enum": [ "SUBJECT", "ATTRIBUTE", "FRIENDLY_ATTRIBUTE" ] }, "signSpMetadata": { "title": "Sign service provider metadata", "description": "Enable/disable signature of the provider SAML metadata.", "type": "string", "enum": [ "true", "false", "" ] }, "signatureAlgorithm": { "title": "Signature algorithm", "description": "The signature algorithm to use to sign documents. Note that 'SHA1' based algorithms are deprecated and can be removed in the future. It is recommended to stick to some more secure algorithm instead of '*_SHA1'.", "type": "string" }, "signingCertificate": { "title": "Validating X509 certificates", "description": "The public certificates Keycloak uses to validate the signatures of SAML requests and responses from the external IDP when Use metadata descriptor URL is OFF. Multiple certificates can be entered separated by comma (,). The certificates can be re-imported from the Metadata descriptor URL clicking the Import Keys action in the identity provider page. The action downloads the current certificates in the metadata endpoint and assigns them to the config in this same option. You need to click Save to definitely store the re-imported certificates.", "type": "string" }, "singleSignOnServiceUrl": { "title": "Single Sign-On service URL", "description": "The Url that must be used to send authentication requests (SAML AuthnRequest).", "type": "string" }, "syncMode": { "title": "Sync mode", "description": "Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers. Possible values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once during first login of the user with this identity provider, 'force' to always update the user during every login with this identity provider.", "type": "string", "enum": [ "IMPORT", "LEGACY", "FORCE" ] }, "validateSignature": { "title": "Validate Signatures", "description": "Enable/disable signature validation of external IDP signatures.", "type": "string", "enum": [ "true", "false", "" ] }, "wantAssertionsEncrypted": { "title": "Want Assertions encrypted", "description": "Indicates whether this service provider expects an encrypted Assertion.", "type": "string", "enum": [ "true", "false", "" ] }, "wantAssertionsSigned": { "title": "Want Assertions signed", "description": "Indicates whether this service provider expects a signed Assertion.", "type": "string", "enum": [ "true", "false", "" ] }, "wantAuthnRequestsSigned": { "title": "Want AuthnRequests signed", "description": "Indicates whether the identity provider expects a signed AuthnRequest.", "type": "string", "enum": [ "true", "false", "" ] }, "xmlSigKeyInfoKeyNameTransformer": { "title": "SAML signature key name", "description": "Signed SAML documents contain identification of signing key in KeyName element. For Keycloak / RH-SSO counter-party, use KEY_ID, for MS AD FS use CERT_SUBJECT, for others check and use NONE if no other option works.", "type": "string", "enum": [ "NONE", "KEY_ID", "CERT_SUBJECT" ] } }, "additionalProperties": { "type": "string" } } ``` </details>
                    nullable: true
                    properties:
                      allowCreate:
                        description: Allow the external identity provider to create a new identifier to represent the principal.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      allowedClockSkew:
                        description: Clock skew in seconds that is tolerated when validating identity provider tokens. Default value is zero.
                        nullable: true
                        type: string
                      attributeConsumingServiceIndex:
                        description: Index of the Attribute Consuming Service profile to request during authentication.
                        nullable: true
                        type: string
                      authnContextClassRefs:
                        description: Ordered list of requested AuthnContext ClassRefs.
                        nullable: true
                        type: string
                      authnContextComparisonType:
                        description: Specifies the comparison method used to evaluate the requested context classes or statements. The default is "Exact".
                        enum:
                        - exact
                        - minimum
                        - maximum
                        - better
                        nullable: true
                        type: string
                      authnContextDeclRefs:
                        description: Ordered list of requested AuthnContext DeclRefs.
                        nullable: true
                        type: string
                      backchannelSupported:
                        description: Does the external IDP support backchannel logout?
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      encryptionAlgorithm:
                        description: Encryption algorithm, which is used by SAML IDP for encryption of SAML documents, assertions or IDs. The corresponding decryption key for decrypt SAML document parts will be chosen based on this configured algorithm and should be available in realm keys for the encryption (ENC) usage. If algorithm is not configured, then any supported algorithm is allowed and decryption key will be chosen based on the algorithm configured in SAML document itself.
                        nullable: true
                        type: string
                      entityId:
                        description: The Entity ID that will be used to uniquely identify this SAML Service Provider.
                        nullable: true
                        type: string
                      forceAuthn:
                        description: Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      hideOnLoginPage:
                        description: If hidden, login with this provider is possible only if requested explicitly, for example using the 'kc_idp_hint' parameter.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      idpEntityId:
                        description: The Entity ID used to validate the Issuer for received SAML assertions. If empty, no Issuer validation is performed.
                        nullable: true
                        type: string
                      loginHint:
                        description: During login phase, forward an optional login_hint query parameter to SAML AuthnRequest's Subject.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      nameIDPolicyFormat:
                        description: Specifies the URI reference corresponding to a name identifier format.
                        nullable: true
                        type: string
                      postBindingAuthnRequest:
                        description: Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      postBindingLogout:
                        description: Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      postBindingResponse:
                        description: Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      principalAttribute:
                        description: Name or Friendly Name of the attribute used to identify external users.
                        nullable: true
                        type: string
                      principalType:
                        description: Way to identify and track external users from the assertion. Default is using Subject NameID, alternatively you can set up identifying attribute.
                        enum:
                        - SUBJECT
                        - ATTRIBUTE
                        - FRIENDLY_ATTRIBUTE
                        nullable: true
                        type: string
                      signSpMetadata:
                        description: Enable/disable signature of the provider SAML metadata.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      signatureAlgorithm:
                        description: The signature algorithm to use to sign documents. Note that 'SHA1' based algorithms are deprecated and can be removed in the future. It is recommended to stick to some more secure algorithm instead of '*_SHA1'.
                        nullable: true
                        type: string
                      signingCertificate:
                        description: The public certificates Keycloak uses to validate the signatures of SAML requests and responses from the external IDP when Use metadata descriptor URL is OFF. Multiple certificates can be entered separated by comma (,). The certificates can be re-imported from the Metadata descriptor URL clicking the Import Keys action in the identity provider page. The action downloads the current certificates in the metadata endpoint and assigns them to the config in this same option. You need to click Save to definitely store the re-imported certificates.
                        nullable: true
                        type: string
                      singleSignOnServiceUrl:
                        description: The Url that must be used to send authentication requests (SAML AuthnRequest).
                        nullable: true
                        type: string
                      syncMode:
                        description: 'Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers. Possible values are: ''legacy'' to keep the behaviour before this option was introduced, ''import'' to only import the user once during first login of the user with this identity provider, ''force'' to always update the user during every login with this identity provider.'
                        enum:
                        - IMPORT
                        - LEGACY
                        - FORCE
                        nullable: true
                        type: string
                      validateSignature:
                        description: Enable/disable signature validation of external IDP signatures.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      wantAssertionsEncrypted:
                        description: Indicates whether this service provider expects an encrypted Assertion.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      wantAssertionsSigned:
                        description: Indicates whether this service provider expects a signed Assertion.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      wantAuthnRequestsSigned:
                        description: Indicates whether the identity provider expects a signed AuthnRequest.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      xmlSigKeyInfoKeyNameTransformer:
                        description: Signed SAML documents contain identification of signing key in KeyName element. For Keycloak / RH-SSO counter-party, use KEY_ID, for MS AD FS use CERT_SUBJECT, for others check and use NONE if no other option works.
                        enum:
                        - NONE
                        - KEY_ID
                        - CERT_SUBJECT
                        nullable: true
                        type: string
                    type: object
                  displayName:
                    description: Friendly name for Identity Providers.
                    nullable: true
                    type: string
                  enabled:
                    nullable: true
                    type: boolean
                  firstBrokerLoginFlowAlias:
                    description: Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that no Keycloak account is currently linked to the authenticated identity provider account.
                    nullable: true
                    type: string
                  hideOnLogin:
                    description: If hidden, login with this provider is possible only if requested explicitly, for example using the 'kc_idp_hint' parameter.
                    nullable: true
                    type: boolean
                  internalId:
                    nullable: true
                    type: string
                  linkOnly:
                    description: If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider.
                    nullable: true
                    type: boolean
                  organizationId:
                    nullable: true
                    type: string
                  postBrokerLoginFlowAlias:
                    description: Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this to "None" if you need no any additional authenticators to be triggered after login with this identity provider. Also note that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
                    nullable: true
                    type: string
                  providerId:
                    nullable: true
                    type: string
                  storeToken:
                    description: Enable/disable if tokens must be stored after authenticating users.
                    nullable: true
                    type: boolean
                  trustEmail:
                    description: If enabled, email provided by this provider is not verified even if verification is enabled for the realm.
                    nullable: true
                    type: boolean
                  updateProfileFirstLogin:
                    nullable: true
                    type: boolean
                  updateProfileFirstLoginMode:
                    nullable: true
                    type: string
                type: object
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: has(self.alias) == has(oldSelf.alias)
              options:
                description: Options for the request to the Keycloak Admin API.
                nullable: true
                type: object
              patchFrom:
                additionalProperties:
                  description: EnvVarSource represents a source for the value of an EnvVar.
                  properties:
                    configMapKeyRef:
                      description: Selects a key of a ConfigMap.
                      properties:
                        key:
                          description: The key to select.
                          type: string
                        name:
                          description: 'Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        optional:
                          description: Specify whether the ConfigMap or its key must be defined
                          type: boolean
                      required:
                      - key
                      - name
                      type: object
                    fieldRef:
                      description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                      properties:
                        apiVersion:
                          description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                          type: string
                        fieldPath:
                          description: Path of the field to select in the specified API version.
                          type: string
                      required:
                      - fieldPath
                      type: object
                    resourceFieldRef:
                      description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                      properties:
                        containerName:
                          description: 'Container name: required for volumes, optional for env vars'
                          type: string
                        divisor:
                          description: Specifies the output format of the exposed resources, defaults to "1"
                          type: string
                        resource:
                          description: 'Required: resource to select'
                          type: string
                      required:
                      - resource
                      type: object
                    secretKeyRef:
                      description: Selects a key of a secret in the pod's namespace
                      properties:
                        key:
                          description: The key of the secret to select from.  Must be a valid secret key.
                          type: string
                        name:
                          description: 'Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        optional:
                          description: Specify whether the Secret or its key must be defined
                          type: boolean
                      required:
                      - key
                      - name
                      type: object
                    valueAs:
                      enum:
                      - auto
                      - string
                      - number
                      - yaml
                      - json
                      - bool
                      nullable: true
                      type: string
                  type: object
                description: Defines additional values that can be loaded from secrets or configmaps. Field selectors are not supported. For more informations see [the patches documentation](../configuration/patches.md).
                type: object
              realmRef:
                description: The name of the realm to which this object belongs to
                type: string
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: self == oldSelf
            required:
            - definition
            type: object
          status:
            nullable: true
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
                      format: date-time
                      nullable: true
                      type: string
                    message:
                      nullable: true
                      type: string
                    reason:
                      nullable: true
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              instance:
                anyOf:
                - required:
                  - instanceRef
                - required:
                  - clusterInstanceRef
                properties:
                  clusterInstanceRef:
                    description: The name of the cluster instance to which this object belongs to.
                    type: string
                    x-kubernetes-validations:
                    - message: Value is immutable
                      rule: self == oldSelf
                  instanceRef:
                    description: The name of the namespaced instance to which this object belongs to.
                    type: string
                    x-kubernetes-validations:
                    - message: Value is immutable
                      rule: self == oldSelf
                type: object
              message:
                type: string
              ready:
                type: boolean
              resourcePath:
                type: string
              status:
                type: string
            required:
            - ready
            type: object
        required:
        - spec
        title: KeycloakIdentityProvider
        type: object
    served: true
    storage: true
    subresources:
      status: {}
