apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: keycloakclients.rustcloak.k8s.eboland.de
spec:
  group: rustcloak.k8s.eboland.de
  names:
    categories:
    - keycloak
    - all
    kind: KeycloakClient
    plural: keycloakclients
    shortNames:
    - kcc
    singular: keycloakclient
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: true if the realm is ready
      jsonPath: .status.ready
      name: Ready
      type: boolean
    - description: Status String of the resource
      jsonPath: .status.status
      name: Status
      type: string
    - description: time since the realm was created
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: resource to define a Client within a [KeycloakRealm](./keycloakrealm.md)
        properties:
          spec:
            anyOf:
            - required:
              - realmRef
            - required:
              - clusterRealmRef
            description: the KeycloakClient resource
            properties:
              clientSecret:
                nullable: true
                properties:
                  clientIdKey:
                    nullable: true
                    type: string
                  clientSecretKey:
                    nullable: true
                    type: string
                  secretName:
                    type: string
                required:
                - secretName
                type: object
              clusterRealmRef:
                description: The name of the cluster realm to which this object belongs to
                type: string
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: self == oldSelf
              definition:
                description: |-
                  ClientRepresentation

                  <details><summary>JSON schema</summary>

                  ```json { "type": "object", "properties": { "access": { "type": "object", "additionalProperties": { "type": "boolean" } }, "adminUrl": { "title": "Admin URL", "description": "URL to the admin interface of the client. Set this if the client supports the adapter REST API. This REST API allows the auth server to push revocation policies and other administrative tasks. Usually this is set to the base URL of the client.", "type": "string" }, "alwaysDisplayInConsole": { "title": "Always display in UI", "description": "Always list this client in the Account UI, even if the user does not have an active session.", "type": "boolean" }, "attributes": { "type": "object", "properties": { "access.token.lifespan": { "title": "Access Token Lifespan", "description": "Max time before an access token is expired. This value is recommended to be short relative to the SSO timeout.", "type": "string", "pattern": "^[0-9]*$" }, "access.token.signed.response.alg": { "title": "Access token signature algorithm", "description": "JWA algorithm used for signing access tokens.", "type": "string" }, "authorization.encrypted.response.alg": { "title": "Authorization response encryption key management algorithm", "description": "JWA Algorithm used for key management in encrypting the authorization response when the response mode is jwt. This option is needed if you want encrypted authorization response. If left empty, the authorization response is just signed, but not encrypted.", "type": "string" }, "authorization.encrypted.response.enc": { "title": "Authorization response encryption content encryption algorithm", "description": "JWA Algorithm used for content encryption in encrypting the authorization response when the response mode is jwt. This option is needed if you want encrypted authorization response. If left empty, the authorization response is just signed, but not encrypted.", "type": "string" }, "authorization.signed.response.alg": { "title": "Authorization response signature algorithm", "description": "JWA algorithm used for signing authorization response tokens when the response mode is jwt.", "type": "string" }, "client.offline.session.idle.timeout": { "title": "Client Offline Session Idle", "description": "Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Offline Session Idle value.", "type": "string", "pattern": "^[0-9]*$" }, "client.offline.session.max.lifespan": { "title": "Client Offline Session Max", "description": "Max time before a client offline session is expired. If Offline Session Max Limited is enabled at realm level, offline tokens are invalidated when a client offline session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Offline Session Max value.", "type": "string", "pattern": "^[0-9]*$" }, "client.session.idle.timeout": { "title": "Client Session Idle", "description": "Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Idle value.", "type": "string", "pattern": "^[0-9]*$" }, "client.session.max.lifespan": { "title": "Client Session Max", "description": "Max time before a client session is expired. Tokens are invalidated when a session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Max value.", "type": "string", "pattern": "^[0-9]*$" }, "client_credentials.use_refresh_token": { "title": "Use refresh tokens for client credentials grant", "description": "If this is on, a refresh_token will be created and added to the token response if the client_credentials grant is used. The OAuth 2.0 RFC6749 Section 4.4.3 states that a refresh_token should not be generated when client_credentials grant is used. If this is off then no refresh_token will be generated and the associated user session will be removed.", "type": "string", "enum": [ "true", "false", "" ] }, "exclude.session.state.from.auth.response": { "title": "Exclude Session State From Authentication Response", "description": "If this is on, the parameter 'session_state' will not be included in OpenID Connect Authentication Response. It is useful if the client uses an older OIDC / OAuth2 adapter, which does not support the 'session_state' parameter.", "type": "string", "enum": [ "true", "false", "" ] }, "id.token.encrypted.response.alg": { "title": "ID token encryption key management algorithm", "description": "JWA Algorithm used for key management in encrypting ID tokens. This option is needed if you want encrypted ID tokens. If left empty, ID Tokens are just signed, but not encrypted.", "type": "string" }, "id.token.encrypted.response.enc": { "title": "ID token encryption content encryption algorithm", "description": "JWA Algorithm used for content encryption in encrypting ID tokens. This option is needed just if you want encrypted ID tokens. If left empty, ID Tokens are just signed, but not encrypted.", "type": "string" }, "id.token.signed.response.alg": { "title": "ID token signature algorithm", "description": "JWA algorithm used for signing ID tokens.", "type": "string" }, "logoUri": { "title": "Logo URL", "description": "URL that references a logo for the Client application", "type": "string" }, "pkce.code.challenge.method": { "title": "Proof Key for Code Exchange Code Challenge Method", "description": "Choose which code challenge method for PKCE is used. If not specified, keycloak does not applies PKCE to a client unless the client sends an authorization request with appropriate code challenge and code exchange method.", "type": "string" }, "policyUri": { "title": "Policy URL", "description": "URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used", "type": "string" }, "post.logout.redirect.uris": { "title": "Valid post logout redirect URIs", "description": "Valid URI pattern a browser can redirect to after a successful login. Simple wildcards are allowed such as 'http://example.com/*'. Relative path can be specified too such as /my/relative/path/*. Relative paths are relative to the client root URL, or if none is specified the auth server root URL is used. For SAML, you must set valid URI patterns if you are relying on the consumer service URL embedded with the login request.", "type": "string" }, "request.object.encryption.alg": { "title": "Request object encryption algorithm", "description": "JWE algorithm, which client needs to use when sending OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', encryption is optional and any algorithm is allowed.", "type": "string" }, "request.object.encryption.enc": { "title": "Request object content encryption algorithm", "description": "JWE algorithm, which client needs to use when encrypting the content of the OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', any algorithm is allowed.", "type": "string" }, "request.object.required": { "title": "Request object required", "description": "Specifies if the client needs to provide a request object with their authorization requests, and what method they can use for this. If set to \"not required\", providing a request object is optional. In all other cases, providing a request object is mandatory. If set to \"request\", the request object must be provided by value. If set to \"request_uri\", the request object must be provided by reference. If set to \"request or request_uri\", either method can be used.", "type": "string" }, "request.object.signature.alg": { "title": "Request object signature algorithm", "description": "JWA algorithm, which client needs to use when sending OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', Request object can be signed by any algorithm (including 'none' ).", "type": "string" }, "require.pushed.authorization.requests": { "title": "Pushed authorization request required", "description": "Boolean parameter indicating whether the authorization server accepts authorization request data only via the pushed authorization request method.", "type": "string", "enum": [ "true", "false", "" ] }, "tls.client.certificate.bound.access.tokens": { "title": "OAuth 2.0 Mutual TLS Certificate Bound Access Tokens Enabled", "description": "This enables support for OAuth 2.0 Mutual TLS Certificate Bound Access Tokens, which means that keycloak bind an access token and a refresh token with a X.509 certificate of a token requesting client exchanged in mutual TLS between keycloak's Token Endpoint and this client. These tokens can be treated as Holder-of-Key tokens instead of bearer tokens.", "type": "string", "enum": [ "true", "false", "" ] }, "token.endpoint.auth.signing.alg": { "title": "Signature algorithm", "description": "The signature algorithm to use to sign documents. Note that 'SHA1' based algorithms are deprecated and can be removed in the future. It is recommended to stick to some more secure algorithm instead of '*_SHA1'.", "type": "string" }, "token.response.type.bearer.lower-case": { "title": "Use lower-case bearer type in token responses", "description": "If this is on, token responses will be set the with the type \"bearer\" in lower-case. By default, the server sets the type as \"Bearer\" as defined by RFC6750.", "type": "string", "enum": [ "true", "false", "" ] }, "tosUri": { "title": "Terms of service URL", "description": "URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service", "type": "string" }, "use.refresh.tokens": { "title": "Use refresh tokens", "description": "If this is on, a refresh_token will be created and added to the token response. If this is off then no refresh_token will be generated.", "type": "string", "enum": [ "true", "false", "" ] }, "user.info.encrypted.response.alg": { "title": "User info response encryption key management algorithm", "description": "JWA Algorithm used for key management in encrypting User Info Endpoint responses. This option is needed if you want encrypted User Info Endpoint responses. If left empty, User Info Endpoint responses are not encrypted.", "type": "string" }, "user.info.encrypted.response.enc": { "title": "User info response encryption content encryption algorithm", "description": "JWA Algorithm used for content encryption in encrypting User Info Endpoint responses. If User Info response encryption key management algorithm is specified, the default for this value is A128CBC-HS256.", "type": "string" }, "user.info.response.signature.alg": { "title": "User info signed response algorithm", "description": "JWA algorithm used for signed User Info Endpoint response. If set to 'unsigned', User Info Response won't be signed and will be returned in application/json format.", "type": "string" }, "x509.allow.regex.pattern.comparison": { "title": "Allow regex pattern comparison", "description": "If OFF, then the Subject DN from given client certificate must exactly match the given DN from the 'Subject DN' property as described in the RFC8705 specification. The Subject DN can be in the RFC4514 or RFC1779 format. If ON, then the Subject DN from given client certificate should match regex specified by 'Subject DN' property.", "type": "string", "enum": [ "true", "false", "" ] }, "x509.subjectdn": { "title": "Subject DN", "description": "A regular expression for validating Subject DN in the Client Certificate. Use \"(.*?)(?:$)\" to match all kind of expressions.", "type": "string" } }, "additionalProperties": { "type": "string" } }, "authenticationFlowBindingOverrides": { "title": "Authentication flow overrides", "type": "object", "properties": { "browser": { "title": "Browser Flow", "description": "Select the flow you want to use for browser authentication.", "type": "string" }, "direct_grant": { "title": "Direct Grant Flow", "description": "Select the flow you want to use for direct grant authentication.", "type": "string" } }, "additionalProperties": { "type": "string" } }, "authorizationServicesEnabled": { "title": "Authorization", "description": "Enable/Disable fine-grained authorization support for a client.", "type": "boolean" }, "authorizationSettings": { "$ref": "#/$defs/ResourceServerRepresentation" }, "baseUrl": { "title": "Home URL", "description": "Default URL to use when the auth server needs to redirect or link back to the client.", "type": "string" }, "bearerOnly": { "description": "This is a special OIDC type. This client only allows bearer token requests and cannot participate in browser logins.", "type": "boolean" }, "clientAuthenticatorType": { "title": "Client Authenticator", "description": "Client Authenticator used for authentication of this client against Keycloak server", "type": "string", "enum": [ "client-jwt", "client-secret", "client-secret-jwt", "client-x509" ] }, "clientId": { "title": "Client ID", "description": "The client identifier registered with the identity provider.", "type": "string" }, "clientTemplate": { "type": "string" }, "consentRequired": { "title": "Consent required", "description": "If enabled, users have to consent to client access.", "type": "boolean" }, "defaultClientScopes": { "type": "array", "items": { "type": "string" } }, "defaultRoles": { "type": "array", "items": { "type": "string" } }, "description": { "title": "Description", "description": "Help text for the description of the new flow", "type": "string" }, "directAccessGrantsEnabled": { "title": "Direct access grants", "description": "This enables support for Direct Access Grants, which means that client has access to username/password of user and exchange it directly with Keycloak server for access token. In terms of OAuth2 specification, this enables support of 'Resource Owner Password Credentials Grant' for this client.", "type": "boolean" }, "directGrantsOnly": { "type": "boolean" }, "enabled": { "title": "Enabled", "description": "Disabled clients cannot initiate a login or have obtained access tokens.", "type": "boolean" }, "frontchannelLogout": { "title": "Front channel logout", "description": "When true, logout requires a browser redirect to client. When false, server performs a background invocation for logout.", "type": "boolean" }, "fullScopeAllowed": { "title": "Full scope allowed", "description": "Allows you to disable all restrictions.", "type": "boolean" }, "id": { "type": "string" }, "implicitFlowEnabled": { "title": "Implicit flow", "description": "This enables support for OpenID Connect redirect based authentication without authorization code. In terms of OpenID Connect or OAuth2 specifications, this enables support of 'Implicit Flow' for this client.", "type": "boolean" }, "name": { "title": "Name", "description": "Specifies display name of the client. For example 'My Client'. Supports keys for localized values as well. For example: ${my_client}.", "type": "string" }, "nodeReRegistrationTimeout": { "title": "Node Re-registration timeout", "description": "Interval to specify max time for registered clients cluster nodes to re-register. If cluster node will not send re-registration request to Keycloak within this time, it will be unregistered from Keycloak.", "type": "integer", "format": "int32", "maximum": 2147483647.0, "minimum": -2147483648.0 }, "notBefore": { "type": "integer", "format": "int32", "maximum": 2147483647.0, "minimum": -2147483648.0 }, "optionalClientScopes": { "type": "array", "items": { "type": "string" } }, "origin": { "type": "string" }, "protocol": { "title": "Protocol", "type": "string" }, "protocolMappers": { "type": "array", "items": { "$ref": "#/$defs/ProtocolMapperRepresentation" } }, "publicClient": { "title": "Client authentication", "description": "This defines the type of the OIDC client. When it's ON, the OIDC type is set to confidential access type. When it's OFF, it is set to public access type.", "type": "boolean" }, "redirectUris": { "title": "Valid redirect URIs", "description": "Valid URI pattern a browser can redirect to after a successful login. Simple wildcards are allowed such as 'http://example.com/*'. Relative path can be specified too such as /my/relative/path/*. Relative paths are relative to the client root URL, or if none is specified the auth server root URL is used. For SAML, you must set valid URI patterns if you are relying on the consumer service URL embedded with the login request.", "type": "array", "items": { "type": "string" } }, "registeredNodes": { "type": "object", "additionalProperties": { "type": "integer", "format": "int32", "maximum": 2147483647.0, "minimum": -2147483648.0 } }, "registrationAccessToken": { "title": "Registration access token", "description": "The registration access token provides access for clients to the client registration service.", "type": "string" }, "rootUrl": { "title": "Root URL", "description": "Root URL appended to relative URLs", "type": "string" }, "secret": { "title": "Client Secret", "type": "string" }, "serviceAccountsEnabled": { "title": "Service accounts roles", "description": "Allows you to authenticate this client to Keycloak and retrieve access token dedicated to this client. In terms of OAuth2 specification, this enables support of 'Client Credentials Grant' for this client.", "type": "boolean" }, "standardFlowEnabled": { "title": "Standard flow", "description": "This enables standard OpenID Connect redirect based authentication with authorization code. In terms of OpenID Connect or OAuth2 specifications, this enables support of 'Authorization Code Flow' for this client.", "type": "boolean" }, "surrogateAuthRequired": { "type": "boolean" }, "type": { "type": "string" }, "useTemplateConfig": { "type": "boolean" }, "useTemplateMappers": { "type": "boolean" }, "useTemplateScope": { "type": "boolean" }, "webOrigins": { "title": "Web origins", "description": "Allowed CORS origins. To permit all origins of Valid Redirect URIs, add '+'. This does not include the '*' wildcard though. To permit all origins, explicitly add '*'.", "type": "array", "items": { "type": "string" } } }, "additionalProperties": false } ``` </details>
                properties:
                  access:
                    additionalProperties:
                      type: boolean
                    type: object
                  adminUrl:
                    description: URL to the admin interface of the client. Set this if the client supports the adapter REST API. This REST API allows the auth server to push revocation policies and other administrative tasks. Usually this is set to the base URL of the client.
                    nullable: true
                    type: string
                  alwaysDisplayInConsole:
                    description: Always list this client in the Account UI, even if the user does not have an active session.
                    nullable: true
                    type: boolean
                  attributes:
                    description: |-
                      ClientRepresentationAttributes

                      <details><summary>JSON schema</summary>

                      ```json { "type": "object", "properties": { "access.token.lifespan": { "title": "Access Token Lifespan", "description": "Max time before an access token is expired. This value is recommended to be short relative to the SSO timeout.", "type": "string", "pattern": "^[0-9]*$" }, "access.token.signed.response.alg": { "title": "Access token signature algorithm", "description": "JWA algorithm used for signing access tokens.", "type": "string" }, "authorization.encrypted.response.alg": { "title": "Authorization response encryption key management algorithm", "description": "JWA Algorithm used for key management in encrypting the authorization response when the response mode is jwt. This option is needed if you want encrypted authorization response. If left empty, the authorization response is just signed, but not encrypted.", "type": "string" }, "authorization.encrypted.response.enc": { "title": "Authorization response encryption content encryption algorithm", "description": "JWA Algorithm used for content encryption in encrypting the authorization response when the response mode is jwt. This option is needed if you want encrypted authorization response. If left empty, the authorization response is just signed, but not encrypted.", "type": "string" }, "authorization.signed.response.alg": { "title": "Authorization response signature algorithm", "description": "JWA algorithm used for signing authorization response tokens when the response mode is jwt.", "type": "string" }, "client.offline.session.idle.timeout": { "title": "Client Offline Session Idle", "description": "Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Offline Session Idle value.", "type": "string", "pattern": "^[0-9]*$" }, "client.offline.session.max.lifespan": { "title": "Client Offline Session Max", "description": "Max time before a client offline session is expired. If Offline Session Max Limited is enabled at realm level, offline tokens are invalidated when a client offline session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Offline Session Max value.", "type": "string", "pattern": "^[0-9]*$" }, "client.session.idle.timeout": { "title": "Client Session Idle", "description": "Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Idle value.", "type": "string", "pattern": "^[0-9]*$" }, "client.session.max.lifespan": { "title": "Client Session Max", "description": "Max time before a client session is expired. Tokens are invalidated when a session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Max value.", "type": "string", "pattern": "^[0-9]*$" }, "client_credentials.use_refresh_token": { "title": "Use refresh tokens for client credentials grant", "description": "If this is on, a refresh_token will be created and added to the token response if the client_credentials grant is used. The OAuth 2.0 RFC6749 Section 4.4.3 states that a refresh_token should not be generated when client_credentials grant is used. If this is off then no refresh_token will be generated and the associated user session will be removed.", "type": "string", "enum": [ "true", "false", "" ] }, "exclude.session.state.from.auth.response": { "title": "Exclude Session State From Authentication Response", "description": "If this is on, the parameter 'session_state' will not be included in OpenID Connect Authentication Response. It is useful if the client uses an older OIDC / OAuth2 adapter, which does not support the 'session_state' parameter.", "type": "string", "enum": [ "true", "false", "" ] }, "id.token.encrypted.response.alg": { "title": "ID token encryption key management algorithm", "description": "JWA Algorithm used for key management in encrypting ID tokens. This option is needed if you want encrypted ID tokens. If left empty, ID Tokens are just signed, but not encrypted.", "type": "string" }, "id.token.encrypted.response.enc": { "title": "ID token encryption content encryption algorithm", "description": "JWA Algorithm used for content encryption in encrypting ID tokens. This option is needed just if you want encrypted ID tokens. If left empty, ID Tokens are just signed, but not encrypted.", "type": "string" }, "id.token.signed.response.alg": { "title": "ID token signature algorithm", "description": "JWA algorithm used for signing ID tokens.", "type": "string" }, "logoUri": { "title": "Logo URL", "description": "URL that references a logo for the Client application", "type": "string" }, "pkce.code.challenge.method": { "title": "Proof Key for Code Exchange Code Challenge Method", "description": "Choose which code challenge method for PKCE is used. If not specified, keycloak does not applies PKCE to a client unless the client sends an authorization request with appropriate code challenge and code exchange method.", "type": "string" }, "policyUri": { "title": "Policy URL", "description": "URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used", "type": "string" }, "post.logout.redirect.uris": { "title": "Valid post logout redirect URIs", "description": "Valid URI pattern a browser can redirect to after a successful login. Simple wildcards are allowed such as 'http://example.com/*'. Relative path can be specified too such as /my/relative/path/*. Relative paths are relative to the client root URL, or if none is specified the auth server root URL is used. For SAML, you must set valid URI patterns if you are relying on the consumer service URL embedded with the login request.", "type": "string" }, "request.object.encryption.alg": { "title": "Request object encryption algorithm", "description": "JWE algorithm, which client needs to use when sending OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', encryption is optional and any algorithm is allowed.", "type": "string" }, "request.object.encryption.enc": { "title": "Request object content encryption algorithm", "description": "JWE algorithm, which client needs to use when encrypting the content of the OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', any algorithm is allowed.", "type": "string" }, "request.object.required": { "title": "Request object required", "description": "Specifies if the client needs to provide a request object with their authorization requests, and what method they can use for this. If set to \"not required\", providing a request object is optional. In all other cases, providing a request object is mandatory. If set to \"request\", the request object must be provided by value. If set to \"request_uri\", the request object must be provided by reference. If set to \"request or request_uri\", either method can be used.", "type": "string" }, "request.object.signature.alg": { "title": "Request object signature algorithm", "description": "JWA algorithm, which client needs to use when sending OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', Request object can be signed by any algorithm (including 'none' ).", "type": "string" }, "require.pushed.authorization.requests": { "title": "Pushed authorization request required", "description": "Boolean parameter indicating whether the authorization server accepts authorization request data only via the pushed authorization request method.", "type": "string", "enum": [ "true", "false", "" ] }, "tls.client.certificate.bound.access.tokens": { "title": "OAuth 2.0 Mutual TLS Certificate Bound Access Tokens Enabled", "description": "This enables support for OAuth 2.0 Mutual TLS Certificate Bound Access Tokens, which means that keycloak bind an access token and a refresh token with a X.509 certificate of a token requesting client exchanged in mutual TLS between keycloak's Token Endpoint and this client. These tokens can be treated as Holder-of-Key tokens instead of bearer tokens.", "type": "string", "enum": [ "true", "false", "" ] }, "token.endpoint.auth.signing.alg": { "title": "Signature algorithm", "description": "The signature algorithm to use to sign documents. Note that 'SHA1' based algorithms are deprecated and can be removed in the future. It is recommended to stick to some more secure algorithm instead of '*_SHA1'.", "type": "string" }, "token.response.type.bearer.lower-case": { "title": "Use lower-case bearer type in token responses", "description": "If this is on, token responses will be set the with the type \"bearer\" in lower-case. By default, the server sets the type as \"Bearer\" as defined by RFC6750.", "type": "string", "enum": [ "true", "false", "" ] }, "tosUri": { "title": "Terms of service URL", "description": "URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service", "type": "string" }, "use.refresh.tokens": { "title": "Use refresh tokens", "description": "If this is on, a refresh_token will be created and added to the token response. If this is off then no refresh_token will be generated.", "type": "string", "enum": [ "true", "false", "" ] }, "user.info.encrypted.response.alg": { "title": "User info response encryption key management algorithm", "description": "JWA Algorithm used for key management in encrypting User Info Endpoint responses. This option is needed if you want encrypted User Info Endpoint responses. If left empty, User Info Endpoint responses are not encrypted.", "type": "string" }, "user.info.encrypted.response.enc": { "title": "User info response encryption content encryption algorithm", "description": "JWA Algorithm used for content encryption in encrypting User Info Endpoint responses. If User Info response encryption key management algorithm is specified, the default for this value is A128CBC-HS256.", "type": "string" }, "user.info.response.signature.alg": { "title": "User info signed response algorithm", "description": "JWA algorithm used for signed User Info Endpoint response. If set to 'unsigned', User Info Response won't be signed and will be returned in application/json format.", "type": "string" }, "x509.allow.regex.pattern.comparison": { "title": "Allow regex pattern comparison", "description": "If OFF, then the Subject DN from given client certificate must exactly match the given DN from the 'Subject DN' property as described in the RFC8705 specification. The Subject DN can be in the RFC4514 or RFC1779 format. If ON, then the Subject DN from given client certificate should match regex specified by 'Subject DN' property.", "type": "string", "enum": [ "true", "false", "" ] }, "x509.subjectdn": { "title": "Subject DN", "description": "A regular expression for validating Subject DN in the Client Certificate. Use \"(.*?)(?:$)\" to match all kind of expressions.", "type": "string" } }, "additionalProperties": { "type": "string" } } ``` </details>
                    nullable: true
                    properties:
                      access.token.lifespan:
                        description: Max time before an access token is expired. This value is recommended to be short relative to the SSO timeout.
                        nullable: true
                        type: string
                      access.token.signed.response.alg:
                        description: JWA algorithm used for signing access tokens.
                        nullable: true
                        type: string
                      authorization.encrypted.response.alg:
                        description: JWA Algorithm used for key management in encrypting the authorization response when the response mode is jwt. This option is needed if you want encrypted authorization response. If left empty, the authorization response is just signed, but not encrypted.
                        nullable: true
                        type: string
                      authorization.encrypted.response.enc:
                        description: JWA Algorithm used for content encryption in encrypting the authorization response when the response mode is jwt. This option is needed if you want encrypted authorization response. If left empty, the authorization response is just signed, but not encrypted.
                        nullable: true
                        type: string
                      authorization.signed.response.alg:
                        description: JWA algorithm used for signing authorization response tokens when the response mode is jwt.
                        nullable: true
                        type: string
                      client.offline.session.idle.timeout:
                        description: Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Offline Session Idle value.
                        nullable: true
                        type: string
                      client.offline.session.max.lifespan:
                        description: Max time before a client offline session is expired. If Offline Session Max Limited is enabled at realm level, offline tokens are invalidated when a client offline session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Offline Session Max value.
                        nullable: true
                        type: string
                      client.session.idle.timeout:
                        description: Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Idle value.
                        nullable: true
                        type: string
                      client.session.max.lifespan:
                        description: Max time before a client session is expired. Tokens are invalidated when a session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Max value.
                        nullable: true
                        type: string
                      client_credentials.use_refresh_token:
                        description: If this is on, a refresh_token will be created and added to the token response if the client_credentials grant is used. The OAuth 2.0 RFC6749 Section 4.4.3 states that a refresh_token should not be generated when client_credentials grant is used. If this is off then no refresh_token will be generated and the associated user session will be removed.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      exclude.session.state.from.auth.response:
                        description: If this is on, the parameter 'session_state' will not be included in OpenID Connect Authentication Response. It is useful if the client uses an older OIDC / OAuth2 adapter, which does not support the 'session_state' parameter.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      id.token.encrypted.response.alg:
                        description: JWA Algorithm used for key management in encrypting ID tokens. This option is needed if you want encrypted ID tokens. If left empty, ID Tokens are just signed, but not encrypted.
                        nullable: true
                        type: string
                      id.token.encrypted.response.enc:
                        description: JWA Algorithm used for content encryption in encrypting ID tokens. This option is needed just if you want encrypted ID tokens. If left empty, ID Tokens are just signed, but not encrypted.
                        nullable: true
                        type: string
                      id.token.signed.response.alg:
                        description: JWA algorithm used for signing ID tokens.
                        nullable: true
                        type: string
                      logoUri:
                        description: URL that references a logo for the Client application
                        nullable: true
                        type: string
                      pkce.code.challenge.method:
                        description: Choose which code challenge method for PKCE is used. If not specified, keycloak does not applies PKCE to a client unless the client sends an authorization request with appropriate code challenge and code exchange method.
                        nullable: true
                        type: string
                      policyUri:
                        description: URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used
                        nullable: true
                        type: string
                      post.logout.redirect.uris:
                        description: Valid URI pattern a browser can redirect to after a successful login. Simple wildcards are allowed such as 'http://example.com/*'. Relative path can be specified too such as /my/relative/path/*. Relative paths are relative to the client root URL, or if none is specified the auth server root URL is used. For SAML, you must set valid URI patterns if you are relying on the consumer service URL embedded with the login request.
                        nullable: true
                        type: string
                      request.object.encryption.alg:
                        description: JWE algorithm, which client needs to use when sending OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', encryption is optional and any algorithm is allowed.
                        nullable: true
                        type: string
                      request.object.encryption.enc:
                        description: JWE algorithm, which client needs to use when encrypting the content of the OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', any algorithm is allowed.
                        nullable: true
                        type: string
                      request.object.required:
                        description: Specifies if the client needs to provide a request object with their authorization requests, and what method they can use for this. If set to "not required", providing a request object is optional. In all other cases, providing a request object is mandatory. If set to "request", the request object must be provided by value. If set to "request_uri", the request object must be provided by reference. If set to "request or request_uri", either method can be used.
                        nullable: true
                        type: string
                      request.object.signature.alg:
                        description: JWA algorithm, which client needs to use when sending OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', Request object can be signed by any algorithm (including 'none' ).
                        nullable: true
                        type: string
                      require.pushed.authorization.requests:
                        description: Boolean parameter indicating whether the authorization server accepts authorization request data only via the pushed authorization request method.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      tls.client.certificate.bound.access.tokens:
                        description: This enables support for OAuth 2.0 Mutual TLS Certificate Bound Access Tokens, which means that keycloak bind an access token and a refresh token with a X.509 certificate of a token requesting client exchanged in mutual TLS between keycloak's Token Endpoint and this client. These tokens can be treated as Holder-of-Key tokens instead of bearer tokens.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      token.endpoint.auth.signing.alg:
                        description: The signature algorithm to use to sign documents. Note that 'SHA1' based algorithms are deprecated and can be removed in the future. It is recommended to stick to some more secure algorithm instead of '*_SHA1'.
                        nullable: true
                        type: string
                      token.response.type.bearer.lower-case:
                        description: If this is on, token responses will be set the with the type "bearer" in lower-case. By default, the server sets the type as "Bearer" as defined by RFC6750.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      tosUri:
                        description: URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service
                        nullable: true
                        type: string
                      use.refresh.tokens:
                        description: If this is on, a refresh_token will be created and added to the token response. If this is off then no refresh_token will be generated.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      user.info.encrypted.response.alg:
                        description: JWA Algorithm used for key management in encrypting User Info Endpoint responses. This option is needed if you want encrypted User Info Endpoint responses. If left empty, User Info Endpoint responses are not encrypted.
                        nullable: true
                        type: string
                      user.info.encrypted.response.enc:
                        description: JWA Algorithm used for content encryption in encrypting User Info Endpoint responses. If User Info response encryption key management algorithm is specified, the default for this value is A128CBC-HS256.
                        nullable: true
                        type: string
                      user.info.response.signature.alg:
                        description: JWA algorithm used for signed User Info Endpoint response. If set to 'unsigned', User Info Response won't be signed and will be returned in application/json format.
                        nullable: true
                        type: string
                      x509.allow.regex.pattern.comparison:
                        description: If OFF, then the Subject DN from given client certificate must exactly match the given DN from the 'Subject DN' property as described in the RFC8705 specification. The Subject DN can be in the RFC4514 or RFC1779 format. If ON, then the Subject DN from given client certificate should match regex specified by 'Subject DN' property.
                        enum:
                        - 'true'
                        - 'false'
                        - ''
                        nullable: true
                        type: string
                      x509.subjectdn:
                        description: A regular expression for validating Subject DN in the Client Certificate. Use "(.*?)(?:$)" to match all kind of expressions.
                        nullable: true
                        type: string
                    type: object
                  authenticationFlowBindingOverrides:
                    description: |-
                      AuthenticationFlowOverrides

                      <details><summary>JSON schema</summary>

                      ```json { "title": "Authentication flow overrides", "type": "object", "properties": { "browser": { "title": "Browser Flow", "description": "Select the flow you want to use for browser authentication.", "type": "string" }, "direct_grant": { "title": "Direct Grant Flow", "description": "Select the flow you want to use for direct grant authentication.", "type": "string" } }, "additionalProperties": { "type": "string" } } ``` </details>
                    nullable: true
                    properties:
                      browser:
                        description: Select the flow you want to use for browser authentication.
                        nullable: true
                        type: string
                      direct_grant:
                        description: Select the flow you want to use for direct grant authentication.
                        nullable: true
                        type: string
                    type: object
                  authorizationServicesEnabled:
                    description: Enable/Disable fine-grained authorization support for a client.
                    nullable: true
                    type: boolean
                  authorizationSettings:
                    description: |-
                      ResourceServerRepresentation

                      <details><summary>JSON schema</summary>

                      ```json { "type": "object", "properties": { "allowRemoteResourceManagement": { "type": "boolean" }, "authorizationSchema": { "$ref": "#/$defs/AuthorizationSchema" }, "clientId": { "type": "string" }, "decisionStrategy": { "$ref": "#/$defs/DecisionStrategy" }, "id": { "type": "string" }, "name": { "type": "string" }, "policies": { "type": "array", "items": { "$ref": "#/$defs/PolicyRepresentation" } }, "policyEnforcementMode": { "$ref": "#/$defs/PolicyEnforcementMode" }, "resources": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" } }, "scopes": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" } } }, "additionalProperties": false } ``` </details>
                    nullable: true
                    properties:
                      allowRemoteResourceManagement:
                        nullable: true
                        type: boolean
                      authorizationSchema:
                        description: |-
                          AuthorizationSchema

                          <details><summary>JSON schema</summary>

                          ```json { "type": "object", "properties": { "resourceTypes": { "type": "object", "additionalProperties": { "$ref": "#/$defs/ResourceType" } } }, "additionalProperties": false } ``` </details>
                        nullable: true
                        properties:
                          resourceTypes:
                            additionalProperties:
                              description: |-
                                ResourceType

                                <details><summary>JSON schema</summary>

                                ```json { "type": "object", "properties": { "scopes": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "type": { "type": "string" } }, "additionalProperties": false } ``` </details>
                              properties:
                                scopes:
                                  items:
                                    type: string
                                  nullable: true
                                  type: array
                                type:
                                  nullable: true
                                  type: string
                              type: object
                            type: object
                        type: object
                      clientId:
                        nullable: true
                        type: string
                      decisionStrategy:
                        description: |-
                          DecisionStrategy

                          <details><summary>JSON schema</summary>

                          ```json { "type": "string", "enum": [ "AFFIRMATIVE", "UNANIMOUS", "CONSENSUS" ] } ``` </details>
                        enum:
                        - AFFIRMATIVE
                        - UNANIMOUS
                        - CONSENSUS
                        nullable: true
                        type: string
                      id:
                        nullable: true
                        type: string
                      name:
                        nullable: true
                        type: string
                      policies:
                        items:
                          description: |-
                            PolicyRepresentation

                            <details><summary>JSON schema</summary>

                            ```json { "type": "object", "properties": { "config": { "type": "object", "additionalProperties": { "type": "string" } }, "decisionStrategy": { "$ref": "#/$defs/DecisionStrategy" }, "description": { "type": "string" }, "id": { "type": "string" }, "logic": { "$ref": "#/$defs/Logic" }, "name": { "type": "string" }, "owner": { "type": "string" }, "policies": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "resourceType": { "type": "string" }, "resources": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "resourcesData": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" }, "uniqueItems": true }, "scopes": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "scopesData": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" } }, "additionalProperties": false } ``` </details>
                          properties:
                            config:
                              additionalProperties:
                                type: string
                              type: object
                            decisionStrategy:
                              description: |-
                                DecisionStrategy

                                <details><summary>JSON schema</summary>

                                ```json { "type": "string", "enum": [ "AFFIRMATIVE", "UNANIMOUS", "CONSENSUS" ] } ``` </details>
                              enum:
                              - AFFIRMATIVE
                              - UNANIMOUS
                              - CONSENSUS
                              nullable: true
                              type: string
                            description:
                              nullable: true
                              type: string
                            id:
                              nullable: true
                              type: string
                            logic:
                              description: |-
                                Logic

                                <details><summary>JSON schema</summary>

                                ```json { "type": "string", "enum": [ "POSITIVE", "NEGATIVE" ] } ``` </details>
                              enum:
                              - POSITIVE
                              - NEGATIVE
                              nullable: true
                              type: string
                            name:
                              nullable: true
                              type: string
                            owner:
                              nullable: true
                              type: string
                            policies:
                              items:
                                type: string
                              nullable: true
                              type: array
                            resourceType:
                              nullable: true
                              type: string
                            resources:
                              items:
                                type: string
                              nullable: true
                              type: array
                            resourcesData:
                              items:
                                description: |-
                                  ResourceRepresentation

                                  <details><summary>JSON schema</summary>

                                  ```json { "type": "object", "properties": { "_id": { "type": "string" }, "attributes": { "type": "object", "additionalProperties": { "type": "array", "items": { "type": "string" } } }, "displayName": { "type": "string" }, "icon_uri": { "type": "string" }, "name": { "type": "string" }, "owner": { "type": "object", "allOf": [ { "$ref": "#/$defs/ResourceOwnerRepresentation" } ] }, "ownerManagedAccess": { "type": "boolean" }, "scopes": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "scopesUma": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" }, "uri": { "type": "string" }, "uris": { "type": "array", "items": { "type": "string" }, "uniqueItems": true } }, "additionalProperties": false } ``` </details>
                                properties:
                                  _id:
                                    nullable: true
                                    type: string
                                  attributes:
                                    additionalProperties:
                                      items:
                                        type: string
                                      type: array
                                    type: object
                                  displayName:
                                    nullable: true
                                    type: string
                                  icon_uri:
                                    nullable: true
                                    type: string
                                  name:
                                    nullable: true
                                    type: string
                                  owner:
                                    description: |-
                                      ResourceOwnerRepresentation

                                      <details><summary>JSON schema</summary>

                                      ```json { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" } }, "additionalProperties": false } ``` </details>
                                    nullable: true
                                    properties:
                                      id:
                                        nullable: true
                                        type: string
                                      name:
                                        nullable: true
                                        type: string
                                    type: object
                                  ownerManagedAccess:
                                    nullable: true
                                    type: boolean
                                  scopes:
                                    items:
                                      description: |-
                                        ScopeRepresentation

                                        <details><summary>JSON schema</summary>

                                        ```json { "type": "object", "properties": { "displayName": { "type": "string" }, "iconUri": { "type": "string" }, "id": { "type": "string" }, "name": { "type": "string" }, "policies": { "type": "array", "items": { "$ref": "#/$defs/PolicyRepresentation" } }, "resources": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" } } }, "additionalProperties": false } ``` </details>
                                      properties:
                                        displayName:
                                          nullable: true
                                          type: string
                                        iconUri:
                                          nullable: true
                                          type: string
                                        id:
                                          nullable: true
                                          type: string
                                        name:
                                          nullable: true
                                          type: string
                                      type: object
                                      x-kubernetes-preserve-unknown-fields: true
                                    nullable: true
                                    type: array
                                  scopesUma:
                                    items:
                                      description: |-
                                        ScopeRepresentation

                                        <details><summary>JSON schema</summary>

                                        ```json { "type": "object", "properties": { "displayName": { "type": "string" }, "iconUri": { "type": "string" }, "id": { "type": "string" }, "name": { "type": "string" }, "policies": { "type": "array", "items": { "$ref": "#/$defs/PolicyRepresentation" } }, "resources": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" } } }, "additionalProperties": false } ``` </details>
                                      properties:
                                        displayName:
                                          nullable: true
                                          type: string
                                        iconUri:
                                          nullable: true
                                          type: string
                                        id:
                                          nullable: true
                                          type: string
                                        name:
                                          nullable: true
                                          type: string
                                      type: object
                                      x-kubernetes-preserve-unknown-fields: true
                                    nullable: true
                                    type: array
                                  type:
                                    nullable: true
                                    type: string
                                  uri:
                                    nullable: true
                                    type: string
                                  uris:
                                    items:
                                      type: string
                                    nullable: true
                                    type: array
                                type: object
                              nullable: true
                              type: array
                            scopes:
                              items:
                                type: string
                              nullable: true
                              type: array
                            scopesData:
                              items:
                                description: |-
                                  ScopeRepresentation

                                  <details><summary>JSON schema</summary>

                                  ```json { "type": "object", "properties": { "displayName": { "type": "string" }, "iconUri": { "type": "string" }, "id": { "type": "string" }, "name": { "type": "string" }, "policies": { "type": "array", "items": { "$ref": "#/$defs/PolicyRepresentation" } }, "resources": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" } } }, "additionalProperties": false } ``` </details>
                                properties:
                                  displayName:
                                    nullable: true
                                    type: string
                                  iconUri:
                                    nullable: true
                                    type: string
                                  id:
                                    nullable: true
                                    type: string
                                  name:
                                    nullable: true
                                    type: string
                                  resources:
                                    items:
                                      description: |-
                                        ResourceRepresentation

                                        <details><summary>JSON schema</summary>

                                        ```json { "type": "object", "properties": { "_id": { "type": "string" }, "attributes": { "type": "object", "additionalProperties": { "type": "array", "items": { "type": "string" } } }, "displayName": { "type": "string" }, "icon_uri": { "type": "string" }, "name": { "type": "string" }, "owner": { "type": "object", "allOf": [ { "$ref": "#/$defs/ResourceOwnerRepresentation" } ] }, "ownerManagedAccess": { "type": "boolean" }, "scopes": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "scopesUma": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" }, "uri": { "type": "string" }, "uris": { "type": "array", "items": { "type": "string" }, "uniqueItems": true } }, "additionalProperties": false } ``` </details>
                                      properties:
                                        _id:
                                          nullable: true
                                          type: string
                                        attributes:
                                          additionalProperties:
                                            items:
                                              type: string
                                            type: array
                                          type: object
                                        displayName:
                                          nullable: true
                                          type: string
                                        icon_uri:
                                          nullable: true
                                          type: string
                                        name:
                                          nullable: true
                                          type: string
                                        owner:
                                          description: |-
                                            ResourceOwnerRepresentation

                                            <details><summary>JSON schema</summary>

                                            ```json { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" } }, "additionalProperties": false } ``` </details>
                                          nullable: true
                                          properties:
                                            id:
                                              nullable: true
                                              type: string
                                            name:
                                              nullable: true
                                              type: string
                                          type: object
                                        ownerManagedAccess:
                                          nullable: true
                                          type: boolean
                                        type:
                                          nullable: true
                                          type: string
                                        uri:
                                          nullable: true
                                          type: string
                                        uris:
                                          items:
                                            type: string
                                          nullable: true
                                          type: array
                                      type: object
                                      x-kubernetes-preserve-unknown-fields: true
                                    type: array
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                              nullable: true
                              type: array
                            type:
                              nullable: true
                              type: string
                          type: object
                        type: array
                      policyEnforcementMode:
                        description: |-
                          PolicyEnforcementMode

                          <details><summary>JSON schema</summary>

                          ```json { "type": "string", "enum": [ "ENFORCING", "PERMISSIVE", "DISABLED" ] } ``` </details>
                        enum:
                        - ENFORCING
                        - PERMISSIVE
                        - DISABLED
                        nullable: true
                        type: string
                      resources:
                        items:
                          description: |-
                            ResourceRepresentation

                            <details><summary>JSON schema</summary>

                            ```json { "type": "object", "properties": { "_id": { "type": "string" }, "attributes": { "type": "object", "additionalProperties": { "type": "array", "items": { "type": "string" } } }, "displayName": { "type": "string" }, "icon_uri": { "type": "string" }, "name": { "type": "string" }, "owner": { "type": "object", "allOf": [ { "$ref": "#/$defs/ResourceOwnerRepresentation" } ] }, "ownerManagedAccess": { "type": "boolean" }, "scopes": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "scopesUma": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" }, "uri": { "type": "string" }, "uris": { "type": "array", "items": { "type": "string" }, "uniqueItems": true } }, "additionalProperties": false } ``` </details>
                          properties:
                            _id:
                              nullable: true
                              type: string
                            attributes:
                              additionalProperties:
                                items:
                                  type: string
                                type: array
                              type: object
                            displayName:
                              nullable: true
                              type: string
                            icon_uri:
                              nullable: true
                              type: string
                            name:
                              nullable: true
                              type: string
                            owner:
                              description: |-
                                ResourceOwnerRepresentation

                                <details><summary>JSON schema</summary>

                                ```json { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" } }, "additionalProperties": false } ``` </details>
                              nullable: true
                              properties:
                                id:
                                  nullable: true
                                  type: string
                                name:
                                  nullable: true
                                  type: string
                              type: object
                            ownerManagedAccess:
                              nullable: true
                              type: boolean
                            scopes:
                              items:
                                description: |-
                                  ScopeRepresentation

                                  <details><summary>JSON schema</summary>

                                  ```json { "type": "object", "properties": { "displayName": { "type": "string" }, "iconUri": { "type": "string" }, "id": { "type": "string" }, "name": { "type": "string" }, "policies": { "type": "array", "items": { "$ref": "#/$defs/PolicyRepresentation" } }, "resources": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" } } }, "additionalProperties": false } ``` </details>
                                properties:
                                  displayName:
                                    nullable: true
                                    type: string
                                  iconUri:
                                    nullable: true
                                    type: string
                                  id:
                                    nullable: true
                                    type: string
                                  name:
                                    nullable: true
                                    type: string
                                  policies:
                                    items:
                                      description: |-
                                        PolicyRepresentation

                                        <details><summary>JSON schema</summary>

                                        ```json { "type": "object", "properties": { "config": { "type": "object", "additionalProperties": { "type": "string" } }, "decisionStrategy": { "$ref": "#/$defs/DecisionStrategy" }, "description": { "type": "string" }, "id": { "type": "string" }, "logic": { "$ref": "#/$defs/Logic" }, "name": { "type": "string" }, "owner": { "type": "string" }, "policies": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "resourceType": { "type": "string" }, "resources": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "resourcesData": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" }, "uniqueItems": true }, "scopes": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "scopesData": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" } }, "additionalProperties": false } ``` </details>
                                      properties:
                                        config:
                                          additionalProperties:
                                            type: string
                                          type: object
                                        decisionStrategy:
                                          description: |-
                                            DecisionStrategy

                                            <details><summary>JSON schema</summary>

                                            ```json { "type": "string", "enum": [ "AFFIRMATIVE", "UNANIMOUS", "CONSENSUS" ] } ``` </details>
                                          enum:
                                          - AFFIRMATIVE
                                          - UNANIMOUS
                                          - CONSENSUS
                                          nullable: true
                                          type: string
                                        description:
                                          nullable: true
                                          type: string
                                        id:
                                          nullable: true
                                          type: string
                                        logic:
                                          description: |-
                                            Logic

                                            <details><summary>JSON schema</summary>

                                            ```json { "type": "string", "enum": [ "POSITIVE", "NEGATIVE" ] } ``` </details>
                                          enum:
                                          - POSITIVE
                                          - NEGATIVE
                                          nullable: true
                                          type: string
                                        name:
                                          nullable: true
                                          type: string
                                        owner:
                                          nullable: true
                                          type: string
                                        policies:
                                          items:
                                            type: string
                                          nullable: true
                                          type: array
                                        resourceType:
                                          nullable: true
                                          type: string
                                        resources:
                                          items:
                                            type: string
                                          nullable: true
                                          type: array
                                        scopes:
                                          items:
                                            type: string
                                          nullable: true
                                          type: array
                                        type:
                                          nullable: true
                                          type: string
                                      type: object
                                      x-kubernetes-preserve-unknown-fields: true
                                    type: array
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                              nullable: true
                              type: array
                            scopesUma:
                              items:
                                description: |-
                                  ScopeRepresentation

                                  <details><summary>JSON schema</summary>

                                  ```json { "type": "object", "properties": { "displayName": { "type": "string" }, "iconUri": { "type": "string" }, "id": { "type": "string" }, "name": { "type": "string" }, "policies": { "type": "array", "items": { "$ref": "#/$defs/PolicyRepresentation" } }, "resources": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" } } }, "additionalProperties": false } ``` </details>
                                properties:
                                  displayName:
                                    nullable: true
                                    type: string
                                  iconUri:
                                    nullable: true
                                    type: string
                                  id:
                                    nullable: true
                                    type: string
                                  name:
                                    nullable: true
                                    type: string
                                  policies:
                                    items:
                                      description: |-
                                        PolicyRepresentation

                                        <details><summary>JSON schema</summary>

                                        ```json { "type": "object", "properties": { "config": { "type": "object", "additionalProperties": { "type": "string" } }, "decisionStrategy": { "$ref": "#/$defs/DecisionStrategy" }, "description": { "type": "string" }, "id": { "type": "string" }, "logic": { "$ref": "#/$defs/Logic" }, "name": { "type": "string" }, "owner": { "type": "string" }, "policies": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "resourceType": { "type": "string" }, "resources": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "resourcesData": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" }, "uniqueItems": true }, "scopes": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "scopesData": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" } }, "additionalProperties": false } ``` </details>
                                      properties:
                                        config:
                                          additionalProperties:
                                            type: string
                                          type: object
                                        decisionStrategy:
                                          description: |-
                                            DecisionStrategy

                                            <details><summary>JSON schema</summary>

                                            ```json { "type": "string", "enum": [ "AFFIRMATIVE", "UNANIMOUS", "CONSENSUS" ] } ``` </details>
                                          enum:
                                          - AFFIRMATIVE
                                          - UNANIMOUS
                                          - CONSENSUS
                                          nullable: true
                                          type: string
                                        description:
                                          nullable: true
                                          type: string
                                        id:
                                          nullable: true
                                          type: string
                                        logic:
                                          description: |-
                                            Logic

                                            <details><summary>JSON schema</summary>

                                            ```json { "type": "string", "enum": [ "POSITIVE", "NEGATIVE" ] } ``` </details>
                                          enum:
                                          - POSITIVE
                                          - NEGATIVE
                                          nullable: true
                                          type: string
                                        name:
                                          nullable: true
                                          type: string
                                        owner:
                                          nullable: true
                                          type: string
                                        policies:
                                          items:
                                            type: string
                                          nullable: true
                                          type: array
                                        resourceType:
                                          nullable: true
                                          type: string
                                        resources:
                                          items:
                                            type: string
                                          nullable: true
                                          type: array
                                        scopes:
                                          items:
                                            type: string
                                          nullable: true
                                          type: array
                                        type:
                                          nullable: true
                                          type: string
                                      type: object
                                      x-kubernetes-preserve-unknown-fields: true
                                    type: array
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                              nullable: true
                              type: array
                            type:
                              nullable: true
                              type: string
                            uri:
                              nullable: true
                              type: string
                            uris:
                              items:
                                type: string
                              nullable: true
                              type: array
                          type: object
                        type: array
                      scopes:
                        items:
                          description: |-
                            ScopeRepresentation

                            <details><summary>JSON schema</summary>

                            ```json { "type": "object", "properties": { "displayName": { "type": "string" }, "iconUri": { "type": "string" }, "id": { "type": "string" }, "name": { "type": "string" }, "policies": { "type": "array", "items": { "$ref": "#/$defs/PolicyRepresentation" } }, "resources": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" } } }, "additionalProperties": false } ``` </details>
                          properties:
                            displayName:
                              nullable: true
                              type: string
                            iconUri:
                              nullable: true
                              type: string
                            id:
                              nullable: true
                              type: string
                            name:
                              nullable: true
                              type: string
                            policies:
                              items:
                                description: |-
                                  PolicyRepresentation

                                  <details><summary>JSON schema</summary>

                                  ```json { "type": "object", "properties": { "config": { "type": "object", "additionalProperties": { "type": "string" } }, "decisionStrategy": { "$ref": "#/$defs/DecisionStrategy" }, "description": { "type": "string" }, "id": { "type": "string" }, "logic": { "$ref": "#/$defs/Logic" }, "name": { "type": "string" }, "owner": { "type": "string" }, "policies": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "resourceType": { "type": "string" }, "resources": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "resourcesData": { "type": "array", "items": { "$ref": "#/$defs/ResourceRepresentation" }, "uniqueItems": true }, "scopes": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "scopesData": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" } }, "additionalProperties": false } ``` </details>
                                properties:
                                  config:
                                    additionalProperties:
                                      type: string
                                    type: object
                                  decisionStrategy:
                                    description: |-
                                      DecisionStrategy

                                      <details><summary>JSON schema</summary>

                                      ```json { "type": "string", "enum": [ "AFFIRMATIVE", "UNANIMOUS", "CONSENSUS" ] } ``` </details>
                                    enum:
                                    - AFFIRMATIVE
                                    - UNANIMOUS
                                    - CONSENSUS
                                    nullable: true
                                    type: string
                                  description:
                                    nullable: true
                                    type: string
                                  id:
                                    nullable: true
                                    type: string
                                  logic:
                                    description: |-
                                      Logic

                                      <details><summary>JSON schema</summary>

                                      ```json { "type": "string", "enum": [ "POSITIVE", "NEGATIVE" ] } ``` </details>
                                    enum:
                                    - POSITIVE
                                    - NEGATIVE
                                    nullable: true
                                    type: string
                                  name:
                                    nullable: true
                                    type: string
                                  owner:
                                    nullable: true
                                    type: string
                                  policies:
                                    items:
                                      type: string
                                    nullable: true
                                    type: array
                                  resourceType:
                                    nullable: true
                                    type: string
                                  resources:
                                    items:
                                      type: string
                                    nullable: true
                                    type: array
                                  resourcesData:
                                    items:
                                      description: |-
                                        ResourceRepresentation

                                        <details><summary>JSON schema</summary>

                                        ```json { "type": "object", "properties": { "_id": { "type": "string" }, "attributes": { "type": "object", "additionalProperties": { "type": "array", "items": { "type": "string" } } }, "displayName": { "type": "string" }, "icon_uri": { "type": "string" }, "name": { "type": "string" }, "owner": { "type": "object", "allOf": [ { "$ref": "#/$defs/ResourceOwnerRepresentation" } ] }, "ownerManagedAccess": { "type": "boolean" }, "scopes": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "scopesUma": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" }, "uri": { "type": "string" }, "uris": { "type": "array", "items": { "type": "string" }, "uniqueItems": true } }, "additionalProperties": false } ``` </details>
                                      properties:
                                        _id:
                                          nullable: true
                                          type: string
                                        attributes:
                                          additionalProperties:
                                            items:
                                              type: string
                                            type: array
                                          type: object
                                        displayName:
                                          nullable: true
                                          type: string
                                        icon_uri:
                                          nullable: true
                                          type: string
                                        name:
                                          nullable: true
                                          type: string
                                        owner:
                                          description: |-
                                            ResourceOwnerRepresentation

                                            <details><summary>JSON schema</summary>

                                            ```json { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" } }, "additionalProperties": false } ``` </details>
                                          nullable: true
                                          properties:
                                            id:
                                              nullable: true
                                              type: string
                                            name:
                                              nullable: true
                                              type: string
                                          type: object
                                        ownerManagedAccess:
                                          nullable: true
                                          type: boolean
                                        type:
                                          nullable: true
                                          type: string
                                        uri:
                                          nullable: true
                                          type: string
                                        uris:
                                          items:
                                            type: string
                                          nullable: true
                                          type: array
                                      type: object
                                      x-kubernetes-preserve-unknown-fields: true
                                    nullable: true
                                    type: array
                                  scopes:
                                    items:
                                      type: string
                                    nullable: true
                                    type: array
                                  type:
                                    nullable: true
                                    type: string
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                              type: array
                            resources:
                              items:
                                description: |-
                                  ResourceRepresentation

                                  <details><summary>JSON schema</summary>

                                  ```json { "type": "object", "properties": { "_id": { "type": "string" }, "attributes": { "type": "object", "additionalProperties": { "type": "array", "items": { "type": "string" } } }, "displayName": { "type": "string" }, "icon_uri": { "type": "string" }, "name": { "type": "string" }, "owner": { "type": "object", "allOf": [ { "$ref": "#/$defs/ResourceOwnerRepresentation" } ] }, "ownerManagedAccess": { "type": "boolean" }, "scopes": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "scopesUma": { "type": "array", "items": { "$ref": "#/$defs/ScopeRepresentation" }, "uniqueItems": true }, "type": { "type": "string" }, "uri": { "type": "string" }, "uris": { "type": "array", "items": { "type": "string" }, "uniqueItems": true } }, "additionalProperties": false } ``` </details>
                                properties:
                                  _id:
                                    nullable: true
                                    type: string
                                  attributes:
                                    additionalProperties:
                                      items:
                                        type: string
                                      type: array
                                    type: object
                                  displayName:
                                    nullable: true
                                    type: string
                                  icon_uri:
                                    nullable: true
                                    type: string
                                  name:
                                    nullable: true
                                    type: string
                                  owner:
                                    description: |-
                                      ResourceOwnerRepresentation

                                      <details><summary>JSON schema</summary>

                                      ```json { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" } }, "additionalProperties": false } ``` </details>
                                    nullable: true
                                    properties:
                                      id:
                                        nullable: true
                                        type: string
                                      name:
                                        nullable: true
                                        type: string
                                    type: object
                                  ownerManagedAccess:
                                    nullable: true
                                    type: boolean
                                  type:
                                    nullable: true
                                    type: string
                                  uri:
                                    nullable: true
                                    type: string
                                  uris:
                                    items:
                                      type: string
                                    nullable: true
                                    type: array
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                              type: array
                          type: object
                        type: array
                    type: object
                  baseUrl:
                    description: Default URL to use when the auth server needs to redirect or link back to the client.
                    nullable: true
                    type: string
                  bearerOnly:
                    description: This is a special OIDC type. This client only allows bearer token requests and cannot participate in browser logins.
                    nullable: true
                    type: boolean
                  clientAuthenticatorType:
                    description: Client Authenticator used for authentication of this client against Keycloak server
                    enum:
                    - client-jwt
                    - client-secret
                    - client-secret-jwt
                    - client-x509
                    nullable: true
                    type: string
                  clientId:
                    description: The client identifier registered with the identity provider.
                    nullable: true
                    type: string
                  clientTemplate:
                    nullable: true
                    type: string
                  consentRequired:
                    description: If enabled, users have to consent to client access.
                    nullable: true
                    type: boolean
                  defaultClientScopes:
                    items:
                      type: string
                    type: array
                  defaultRoles:
                    items:
                      type: string
                    type: array
                  description:
                    description: Help text for the description of the new flow
                    nullable: true
                    type: string
                  directAccessGrantsEnabled:
                    description: This enables support for Direct Access Grants, which means that client has access to username/password of user and exchange it directly with Keycloak server for access token. In terms of OAuth2 specification, this enables support of 'Resource Owner Password Credentials Grant' for this client.
                    nullable: true
                    type: boolean
                  directGrantsOnly:
                    nullable: true
                    type: boolean
                  enabled:
                    description: Disabled clients cannot initiate a login or have obtained access tokens.
                    nullable: true
                    type: boolean
                  frontchannelLogout:
                    description: When true, logout requires a browser redirect to client. When false, server performs a background invocation for logout.
                    nullable: true
                    type: boolean
                  fullScopeAllowed:
                    description: Allows you to disable all restrictions.
                    nullable: true
                    type: boolean
                  id:
                    nullable: true
                    type: string
                    x-kubernetes-validations:
                    - message: Value is immutable
                      rule: self == oldSelf
                  implicitFlowEnabled:
                    description: This enables support for OpenID Connect redirect based authentication without authorization code. In terms of OpenID Connect or OAuth2 specifications, this enables support of 'Implicit Flow' for this client.
                    nullable: true
                    type: boolean
                  name:
                    description: 'Specifies display name of the client. For example ''My Client''. Supports keys for localized values as well. For example: ${my_client}.'
                    nullable: true
                    type: string
                  nodeReRegistrationTimeout:
                    description: Interval to specify max time for registered clients cluster nodes to re-register. If cluster node will not send re-registration request to Keycloak within this time, it will be unregistered from Keycloak.
                    format: int32
                    nullable: true
                    type: integer
                  notBefore:
                    format: int32
                    nullable: true
                    type: integer
                  optionalClientScopes:
                    items:
                      type: string
                    type: array
                  origin:
                    nullable: true
                    type: string
                  protocol:
                    nullable: true
                    type: string
                  protocolMappers:
                    items:
                      description: |-
                        ProtocolMapperRepresentation

                        <details><summary>JSON schema</summary>

                        ```json { "type": "object", "properties": { "config": { "type": "object", "additionalProperties": { "type": "string" } }, "consentRequired": { "type": "boolean" }, "consentText": { "type": "string" }, "id": { "type": "string" }, "name": { "type": "string" }, "protocol": { "type": "string", "enum": [ "openid-connect", "saml" ] }, "protocolMapper": { "type": "string" } }, "additionalProperties": false } ``` </details>
                      properties:
                        config:
                          additionalProperties:
                            type: string
                          type: object
                        consentRequired:
                          nullable: true
                          type: boolean
                        consentText:
                          nullable: true
                          type: string
                        id:
                          nullable: true
                          type: string
                        name:
                          nullable: true
                          type: string
                        protocol:
                          description: |-
                            ProtocolMapperRepresentationProtocol

                            <details><summary>JSON schema</summary>

                            ```json { "type": "string", "enum": [ "openid-connect", "saml" ] } ``` </details>
                          enum:
                          - openid-connect
                          - saml
                          nullable: true
                          type: string
                        protocolMapper:
                          nullable: true
                          type: string
                      type: object
                    type: array
                  publicClient:
                    description: This defines the type of the OIDC client. When it's ON, the OIDC type is set to confidential access type. When it's OFF, it is set to public access type.
                    nullable: true
                    type: boolean
                  redirectUris:
                    description: Valid URI pattern a browser can redirect to after a successful login. Simple wildcards are allowed such as 'http://example.com/*'. Relative path can be specified too such as /my/relative/path/*. Relative paths are relative to the client root URL, or if none is specified the auth server root URL is used. For SAML, you must set valid URI patterns if you are relying on the consumer service URL embedded with the login request.
                    items:
                      type: string
                    type: array
                  registeredNodes:
                    additionalProperties:
                      format: int32
                      type: integer
                    type: object
                  registrationAccessToken:
                    description: The registration access token provides access for clients to the client registration service.
                    nullable: true
                    type: string
                  rootUrl:
                    description: Root URL appended to relative URLs
                    nullable: true
                    type: string
                  secret:
                    nullable: true
                    type: string
                  serviceAccountsEnabled:
                    description: Allows you to authenticate this client to Keycloak and retrieve access token dedicated to this client. In terms of OAuth2 specification, this enables support of 'Client Credentials Grant' for this client.
                    nullable: true
                    type: boolean
                  standardFlowEnabled:
                    description: This enables standard OpenID Connect redirect based authentication with authorization code. In terms of OpenID Connect or OAuth2 specifications, this enables support of 'Authorization Code Flow' for this client.
                    nullable: true
                    type: boolean
                  surrogateAuthRequired:
                    nullable: true
                    type: boolean
                  type:
                    nullable: true
                    type: string
                  useTemplateConfig:
                    nullable: true
                    type: boolean
                  useTemplateMappers:
                    nullable: true
                    type: boolean
                  useTemplateScope:
                    nullable: true
                    type: boolean
                  webOrigins:
                    description: Allowed CORS origins. To permit all origins of Valid Redirect URIs, add '+'. This does not include the '*' wildcard though. To permit all origins, explicitly add '*'.
                    items:
                      type: string
                    type: array
                type: object
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: has(self.id) == has(oldSelf.id)
              options:
                description: Options for the request to the Keycloak Admin API.
                nullable: true
                type: object
              patchFrom:
                additionalProperties:
                  description: EnvVarSource represents a source for the value of an EnvVar.
                  properties:
                    configMapKeyRef:
                      description: Selects a key of a ConfigMap.
                      properties:
                        key:
                          description: The key to select.
                          type: string
                        name:
                          description: 'Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        optional:
                          description: Specify whether the ConfigMap or its key must be defined
                          type: boolean
                      required:
                      - key
                      - name
                      type: object
                    fieldRef:
                      description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                      properties:
                        apiVersion:
                          description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                          type: string
                        fieldPath:
                          description: Path of the field to select in the specified API version.
                          type: string
                      required:
                      - fieldPath
                      type: object
                    resourceFieldRef:
                      description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                      properties:
                        containerName:
                          description: 'Container name: required for volumes, optional for env vars'
                          type: string
                        divisor:
                          description: Specifies the output format of the exposed resources, defaults to "1"
                          type: string
                        resource:
                          description: 'Required: resource to select'
                          type: string
                      required:
                      - resource
                      type: object
                    secretKeyRef:
                      description: Selects a key of a secret in the pod's namespace
                      properties:
                        key:
                          description: The key of the secret to select from.  Must be a valid secret key.
                          type: string
                        name:
                          description: 'Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        optional:
                          description: Specify whether the Secret or its key must be defined
                          type: boolean
                      required:
                      - key
                      - name
                      type: object
                    valueAs:
                      enum:
                      - auto
                      - string
                      - number
                      - yaml
                      - json
                      - bool
                      nullable: true
                      type: string
                  type: object
                description: Defines additional values that can be loaded from secrets or configmaps. Field selectors are not supported. For more informations see [the patches documentation](../configuration/patches.md).
                type: object
              patchFrom2:
                items:
                  description: EnvVarSource represents a source for the value of an EnvVar.
                  properties:
                    configMapKeyRef:
                      description: Selects a key of a ConfigMap.
                      properties:
                        key:
                          description: The key to select.
                          type: string
                        name:
                          description: 'Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        optional:
                          description: Specify whether the ConfigMap or its key must be defined
                          type: boolean
                      required:
                      - key
                      - name
                      type: object
                    fieldRef:
                      description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                      properties:
                        apiVersion:
                          description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                          type: string
                        fieldPath:
                          description: Path of the field to select in the specified API version.
                          type: string
                      required:
                      - fieldPath
                      type: object
                    path:
                      type: string
                    resourceFieldRef:
                      description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                      properties:
                        containerName:
                          description: 'Container name: required for volumes, optional for env vars'
                          type: string
                        divisor:
                          description: Specifies the output format of the exposed resources, defaults to "1"
                          type: string
                        resource:
                          description: 'Required: resource to select'
                          type: string
                      required:
                      - resource
                      type: object
                    secretKeyRef:
                      description: Selects a key of a secret in the pod's namespace
                      properties:
                        key:
                          description: The key of the secret to select from.  Must be a valid secret key.
                          type: string
                        name:
                          description: 'Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        optional:
                          description: Specify whether the Secret or its key must be defined
                          type: boolean
                      required:
                      - key
                      - name
                      type: object
                    valueAs:
                      enum:
                      - auto
                      - string
                      - number
                      - yaml
                      - json
                      - bool
                      nullable: true
                      type: string
                  required:
                  - path
                  type: object
                type: array
              realmRef:
                description: The name of the realm to which this object belongs to
                type: string
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: self == oldSelf
            required:
            - definition
            type: object
          status:
            nullable: true
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
                      format: date-time
                      nullable: true
                      type: string
                    message:
                      nullable: true
                      type: string
                    reason:
                      nullable: true
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              instance:
                anyOf:
                - required:
                  - instanceRef
                - required:
                  - clusterInstanceRef
                properties:
                  clusterInstanceRef:
                    description: The name of the cluster instance to which this object belongs to.
                    type: string
                    x-kubernetes-validations:
                    - message: Value is immutable
                      rule: self == oldSelf
                  instanceRef:
                    description: The name of the namespaced instance to which this object belongs to.
                    type: string
                    x-kubernetes-validations:
                    - message: Value is immutable
                      rule: self == oldSelf
                type: object
              message:
                type: string
              ready:
                type: boolean
              resourcePath:
                type: string
              status:
                type: string
            required:
            - ready
            type: object
        required:
        - spec
        title: KeycloakClient
        type: object
    served: true
    storage: true
    subresources:
      status: {}
